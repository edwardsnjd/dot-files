# To use these git aliases, add the following to your git config file.
#
# [include]
#	path=.gitconfig_aliases
#
# Your global git config file is ~/.gitconfig.
# The repository git config file is {repo}/.git/config.

# Log formatting with %Cxxx
# -------------------------
# For formatting log text with colour, we can use the %Cxxx placeholder.
# E.g. to colour just "Foo" in bold red: "Normal text %C(red bold)Foo%Creset Normal text"
# Available colours: normal, black, red, green, yellow, blue, magenta, cyan and white
# Available attributes: bold, dim, ul, blink and reverse.

[alias]
	# Less typing
	ch = checkout
	co = commit --verbose
	df = diff
	dfc = diff --cached
	dfs = diff --stats
	dfw = diff --word-diff-regex="[@a-zA-Z0-9_]+|[^[:space:]]" # identifier or non-space
	dfl = diff --word-diff-regex="[@a-zA-Z0-9_]+|." # identifier or anything
	dflc = !git dfl --word-diff=color

	# Concise status
	st = status --short --branch

	# Better log
	lg = log --color --graph --pretty=format:'%C(yellow)%h %C(green)%ad%C(reset) %s %C(green)(%cr) %C(cyan)<%an>%C(red)%d%C(reset)' --abbrev-commit --decorate --date=short -n20
	lgt = !git lg --since=12am
	lgm = !git lg main..
	lgd = !git lg develop..

	# Better log (+stats)
	lgs = !git lg --numstat
	lgs-today = !git lgs --since=12am

	# List aliases
	la = !git config --get-regexp alias | cut -c 7-

	# Go home (requires a branch name as only argument: `git cpp main`)
	cpp = "![ x$# != x1 ] && echo "commit-ish required" >&2 || git checkout \"$1\" && git pull && git remote prune origin && git submodule update && git branch #"

	# Add a patch at a time
	patch = add --patch

	# Commit using previous commit message
	recommit = "!git commit --edit --file=\"$(git rev-parse --git-dir)/COMMIT_EDITMSG\""

	# Find related merge commits
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"
