#!/usr/bin/env bash

# NAME
#   list-keys - fzf browse of all configured key bindings in your shell
#   (assumes bash, fzf, and looks for tmux, w3m)
#
# USAGE
#   source list-keys

function ListKeys() {
  # Performance: Capture data once to temp file (for multiple use)
  local temp="$(mktemp)"

  # HACK: Columnize header with data to match expected columns
  {
    echo "app	mode	key(s)	command(s)"
    ListReadlineKeys
    ListFzfKeys
    [[ -x "$(command -v list-tmux-keys)" ]] && list-tmux-keys
    [[ -x "$(command -v list-w3m-keys)" ]] && list-w3m-keys
  } | column -s $'\t' -t > "$temp"

  # fzf to browse the bindings
  local header=$(head -1 "$temp")
  tail +2 "$temp" \
    | sort \
    | fzf \
      --reverse \
      --no-sort \
      --ellipsis "â‹¯" \
      --header "$header"

  # Tidy up
  rm $temp
}

# List default key bindings for fzf
# Rows: app	mode	key(s)	command(s)
function ListFzfKeys() {
  echo "/AVAILABLE ACTION/+4,/ACTION COMPOSITION/-3 p" \
    | ex <( MANWIDTH=200 man -P cat fzf | col -b ) \
    | sed -E '
      # Strip leading spaces
      s/^ +//
      # Separate first field
      s/^([^ ]+) +/\1	/
      # Handle second field notes
      s/^([^	]+)	\((.+)\)$/\1	<none>	\2/
      # Handle second field keys
      s/^([^	]+)	([^	]+)$/\1	\2	/
      # Handle single fields
      s/^([^	]+)$/\1	<none>	/
      # Handle 3 fields
      s/^([^	]+)	([^	]+) +\((.+)\)\t$/\1	\2	\3/
    ' \
    | awk -F $'\t' '{
      split($2, keys, " +")
      for (i in keys) {
        printf("fzf	root	%s	%s\n", keys[i], $1)
      }
    }' \
    | sed -E 's/ \(\)$//' \
    | sed -E 's/ctrl-/C-/g; s/alt-/M-/g'
}

# List all key bindings for bash readline
# NOTE: This will only return your keybindings if run in an interactive
# shell session.  Running `bind` from a non-interactive script will not have
# loaded your interactive bash configuration, which might include `readline`
# keybindings.
# Rows: app	mode	key(s)	command(s)
function ListReadlineKeys() {
  local selfInsertHex=$(printf ": self-insert" | xxd -c0 -p)
  local quoteHex=$(printf '"' | xxd -c0 -p)
  local newlineHex=$(printf "\n" | xxd -c0 -p)

  # HACK: Detour via hex representation so we can remove mappings for
  # non-textual lines, since they break all the normal line based tools.
  {
    bind -X \
      | sed -E 's/^"(.*)": (.*)$/readline\troot\t\1\t\2/'
    bind -p \
      | tail +2 \
      | xxd -c0 -p | sed -E "s/${quoteHex}.{2,8}${quoteHex}${selfInsertHex}${newlineHex}//g" | xxd -r -p \
      | grep -v "^#" \
      | sed -E 's/^"(.*)": (.*)$/readline\troot\t\1\t(readline)\2/'
  } | awk -F $'\t' -v OFS=$'\t' '{
      gsub(/ /, "Space", $3)
      gsub(/\\C/, "C", $3)
      gsub(/\\e/, "M-", $3)
      print
    }'
}

ListKeys "$@"
