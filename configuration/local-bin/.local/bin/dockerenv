#!/usr/bin/env bash

# Create and access a docker environment for the current directory.
#
# Usage:
#  dockerenv <command> [args...]
#  dockerenv help

# Commands

function main() {
  local command="${1:-shell}"
  shift

  case "$command" in
    up|start|run)
      up "$@";;
    list|ls)
      list "$@";;
    shell|exec)
      shell "$@";;
    down|stop|kill|rm)
      dwn "$@";;
    binstub)
      binstub "$@";;
    binstubs)
      binstubs "$@";;
    help)
      hlp "$@";;
    *)
      unknown "$command";;
  esac
}

function up() {
  local image="${1:-${DOCKERENV_IMAGE}}"
  shift
  local name="$(containername)"
  [ -z "$image" ] && echo "Image required, see help" >/dev/stderr && exit 1
  docker run --interactive --tty --detach -v "$PWD":/work -w /work --name="$name" "$@" "$image"
}

function list() {
  local name="$(containername)"
  docker container ls --filter="name=${name}" "$@"
}

function shell() {
  local name="$(containername)"
  local command="${1:-bash}"
  shift
  docker exec --interactive --tty "${name}" "${command}" "$@"
}

function dwn() {
  local name="$(containername)"
  docker rm --force "$@" "${name}"
}

function containername() {
  echo "dockerenv-$(basename ${PWD})"
}

function binstub() {
  local name="$1"
  [ -z "$name" ] && echo "Name required, see help" >/dev/stderr && exit 1

  local newalias="dockerenv exec $@"

  cat <<-END
		! alias ${name} &> /dev/null
		&& alias ${name}="${newalias}"
		&& (echo "# Success! Added alias:" && alias ${name})
		|| (echo "# Nope! Existing alias:" && alias ${name} && exit 1);
	END
}

function binstubs() {
  for name in "$@"
  do
    binstub "${name}"
  done
}

function unknown() {
  echo "Sorry, unknown command: \"$1\""
  exit 1
}

function hlp() {
  cat <<-END
		NAME
		    dockerenv - docker dev environments

		SYNOPSIS
		    dockerenv [command] [options]

		COMMANDS
		    up|start|run [image] [options]
		      Start a devenv container in the background.
		
		      If supplied, image is the docker image to run.  If no image is
		      supplied the environment variable DOCKERENV_IMAGE is used.
		
		      If supplied, options are passed to docker run.  In order to supply
		      any run options, the image is required.  To use the default:
		        dockerenv up \$DOCKERENV_IMAGE [options]
		
		    list|ls [options]
		      List the devenv container for this directory.
		
		      If supplied, options are passed to docker ls.
		
		    shell|exec [command]
		      Run a command inside a devenv container.
		
		      If supplied [command] is the command to run in the container.  If
		      not supplied, bash will be used instead.
		
		    down|stop|kill|rm [options]
		      Stop a devenv container.
		
		      If supplied, options are passed to docker rm.
		
		    binstub name [args...]
		      Output the text of a bash script to setup an alias suitable for use
		      as a bin stub in the current directory.  To create the alias, eval
		      the raw text:
		        $ eval \$(dockerenv binstub foo)  # create temporary alias
		        $ foo somefile.foo                # use alias as if local
		        $ unalias foo                     # remove the alias
		
		      name is the program to alias, and is also used as the name of the
		      function.
		
		      If supplied args are additional arguments supplied to the named
		      program via the alias.
		
		    binstubs [name...]
		      Convenient way to create binstubs for a number of names.  To create
		      the alias eval the raw text:
		        $ eval \$(dockerenv binstubs irb ruby)  # create aliases
		        $ ruby foo.rb                           # use aliases
		        $ irb
		        $ unalias irb ruby                      # remove them
		
		      Argument passing is not possible with this command.  If the named
		      program needs arguments baked into the alias then use binstub.
		END
}

# Entry point

main "$@"
