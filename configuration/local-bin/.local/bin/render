#!/usr/bin/env bash

# Render selected file or directory
# Usage: render file [width] [height]
#
# Optionally make the html render text only:
#   RENDER_SIMPLE_HTML=1 render foo.html

set -o nounset
set -o errexit
set -o pipefail
#set -o xtrace

function main() {
  if [ -d "$1" ]; then
    render_directory "$@"
  else
    render_file "$@"
  fi
}

function render_directory() {
  local title="$(tput setaf 3; tput smul)"
  local heading="$(tput smul)"
  local reset="$(tput sgr0)"

  echo "${title}Tree${reset}"
  echo
  tree -aF -I .git --dirsfirst -C -L 4 "$1"
  echo
  echo "${title}Code${reset}"
  echo
  {
    printf "Type\tLines\n"
    tokei-json -- --hidden "$1" | jq --color-output --raw-output '
    .lines | to_entries | .[] | [.key, .value] | @tsv
    '
  } \
    | column -s $'\t' -t \
    | sed -E "1s/[^ \t]+/${heading}&${reset}/g"
}

function render_file() {
  case ${1,,} in
    *.png|*.gif|*.jpg|*.jpeg|*.mov|*.mp4|*.3gp)
      render_visual "$@";;
    *.svg)
      render_svg "$@";;
    *.md)
      render_markdown "$@";;
    *.html)
      render_html "$@";;
    *)
      render_textual "$@";;
  esac
}

function render_visual() {
  chafa \
    --animate=false \
    --duration=0 \
    --work=1 \
    --size "${2:-$(tput cols)}x${3:-$(tput lines)}" \
    "$1"
}

function render_svg() {
  local file="$1"
  shift

  local png="$(mktemp).png"
  convert "svg:$file" "$png"
  render_visual "$png" "$@"
  rm "$png"
}

function render_markdown() {
  glow --width "${2:-$(tput cols)}" --style "auto" "$1"
}

function render_html() {
  if [[ -n ${RENDER_SIMPLE_HTML:-} ]]; then
    w3m -dump -o display_borders=1 "$1"
  else
    local file="$1"
    shift
    render_markdown <(pandoc --to markdown "$file") "$@"
  fi
}

function render_textual() {
  bat --force-colorization --plain --paging "never" "$1"
}

main "$@"
