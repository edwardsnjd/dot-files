#!/usr/bin/env bash

# NAME
#    lines-of-code - simple report of lines of code
#
# SYNOPSIS
#    lines-of-code [options] [path path...]
#
# OPTIONS
#    --files       = Output information about all discovered files
#    --pretty      = Pretty print the table
#    --type t      = Only print the row for type "t"
#    --merge-types = Short hand for "--type Total"
#    --merge-paths = Merge data for each type for all paths
#    --help, -h    = Print this usage info.
#
# OUTPUT
#    TSV with one line per path per lang:
#    <path> <lang> <lines> <code> <comments> <blanks>
#
#    By default, only supplied paths will be have rows.  With
#    --files, the rows will be for all discovered files.
#
# DEPENDENCIES
#   - tokei
#   - sed
#   - jq

set -o nounset
set -o errexit
set -o pipefail
#set -o xtrace

function Main() {
  local files=0
  local pretty=0
  local merge_paths=0
  local type=

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --files)       files=1 ;;
      --pretty)      pretty=1 ;;
      --type)        shift && type="$1" ;;
      --merge-types) type="Total" ;;
      --merge-paths) merge_paths=1 ;;
      --help | -h)   Usage "$@"; exit 0 ;;
      *)             break ;;
    esac
    shift
  done

  case "$files" in
    0) SummaryTable "${@:-$PWD}" ;;
    1) FilesTable "${@:-$PWD}" ;;
  esac \
    | if [[ -n "${type}" ]]; then FilterType "$type"; else cat; fi  \
    | if [[ $merge_paths -eq 1 ]]; then MergePaths; else cat; fi  \
    | if [[ $pretty -eq 1 ]]; then PrettyPrint; else cat; fi
}

function Error() {
  echo "ERROR: $@" >&2
  echo >&2
  Usage >&2
  exit 1
}

function Usage() {
  sed -E -f <(GetSection "UsageSedScript") $0
}

# Get a delimited section of this file
function GetSection() {
  local section="$1"
  sed -En "/^#.*${section}:Start/,/^#.*${section}:End/ { s/^# ?//; p; }" $0 \
    | sed '1d; $d'
}

function SummaryTable() {
  PrintHeader
  for path in "$@"; do
    # BUG: tokei has a bug meaning .gitignore is not respected
    # when child directories are supplied, so use subshell:
    # https://github.com/XAMPPRocky/tokei/issues/811
    (
      cd "$path"
      tokei --output="json" --compact --hidden --exclude .git \
        | jq -f <(GetSection "JqSummaryScript") \
        | jq --raw-output --arg path "$path" \
          '[$path, .type, .lines, .code, .comments, .blanks] | @tsv'
    )
  done
}

function FilesTable() {
  PrintHeader
  for path in "$@"; do
    # BUG: tokei has a bug meaning .gitignore is not respected
    # when child directories are supplied, so use subshell:
    # https://github.com/XAMPPRocky/tokei/issues/811
    (
      cd "$path"
      tokei --output="json" --compact --hidden --exclude .git --files \
        | jq -f <(GetSection "JqFilesScript") \
        | jq --raw-output \
          '[.path, .type, .lines, .code, .comments, .blanks] | @tsv'
    )
  done
}

function PrintHeader() {
  printf "Path\tType\tLines\tCode\tComments\tBlanks\n"
}

function PrettyPrint() {
  local heading="$(tput smul)"
  local reset="$(tput sgr0)"
  column -s $'\t' -t \
    | sed -E "1s/[^ 	]+/${heading}&${reset}/g"
}

function FilterType() {
  local type="$1"
  awk -v type="$type" -v OFS=$'\t' 'NR == 1; $2 == type;'
}

function MergePaths() {
  awk -f <(GetSection "AwkMergePaths") \
    | {
      read headers
      echo "$headers"
      sort
    }
}

Main "$@"

exit 0

# The rest of this file is not executed, so can hold scripts for
# different languages etc.  Use `GetSection xxx` to obtain the
# text for a particular section.

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ UsageSedScript:Start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# #n
# /^#!/ n
# /^#/ {
#   :heading
#   /^#/ {
#     s/^# ?//
#     p
#     n
#     b heading
#   }
#   q
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ UsageSedScript:End ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ JqSummaryScript:Start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# to_entries[] | {
#   type: .key,
#   lines: .value | (.code + .comments + .blanks),
#   code: .value.code,
#   comments: .value.comments,
#   blanks: .value.blanks,
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JqSummaryScript:End ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~ JqFilesScript:Start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# to_entries[] | .key as $type | .value.reports[] | {
#   type: $type,
#   path: .name,
#   lines: .stats | (.code + .comments + .blanks),
#   code: .stats.code,
#   comments: .stats.comments,
#   blanks: .stats.blanks
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ JqFilesScript:End ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AwkMergePaths:Start ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BEGIN { FS = OFS = "\t" }
# NR == 1
# NR > 1 {
#   type = $2
#   types[type] = 1
#   lines[type] += $3
#   code[type] += $4
#   comments[type] += $5
#   blanks[type] += $6
# }
# END {
#   for (type in types) {
#     printf "%s\t%s\t%d\t%d\t%d\t%d\n",
#       "#merged#",
#       type,
#       lines[type], code[type], comments[type], blanks[type]
#   }
# }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AwkMergePaths:End ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
