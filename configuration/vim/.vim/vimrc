" High level
set nocompatible        " Turn of old vi compatibility mode
set modelines=0         " Disable modelines
set encoding=utf-8      " Just make everything boring

" Buffers
set hidden              " Allow unsaved buffers off screen

" General
set showcmd             " Show commands as typing them
set nonumber            " Hide line numbers
set norelativenumber    " Hide relative line numbers
set linebreak           " Break lines at word (requires Wrap lines)
set textwidth=0         " Do not change buffer text when wrapping
set showmatch           " Highlight matching brace
set visualbell          " Use visual bell (no beeping)
set cursorline          " Highlight current line
set title               " Set window title if possible
set nowrap              " Do not wrap long lines by default
set backspace=indent,eol,start " Allow backspace over anything
set lazyredraw          " Speed up macro playback by leaving screen

" Search
set hlsearch            " Highlight all search results
set smartcase           " Enable smart-case search
set ignorecase          " Always case-insensitive

" Tabs
set tabstop=2           " Size of tab in spaces
set shiftwidth=2        " Number of auto-indent spaces
set expandtab           " Insert spaces for tab key
set smartindent         " Enable smart-indent
set softtabstop=0       " Number of spaces per Tab

" Whitespace
set list                " Display whitespace
set listchars=tab:▸\ ,trail:␣

" Aesthetics
set fillchars=vert:│

" Enable persistent undo
set undolevels=1000     " Number of undo levels
set undofile            " Persist undo details for all files
set undodir=~/.local/state/vim/undo// " Use complete path to build undo file path
call mkdir(&undodir, "p")

" Swap files
set swapfile
set directory=~/.local/state/vim/swap// " Use complete path to build swap file path
call mkdir(&directory, "p")

" Session management
set sessionoptions-=options " Don't store maps or options

" Enable code folding
set foldmethod=indent   " Fast folding
set nofoldenable        " Do not fold on opening
set foldnestmax=10      " Limit max nesting (e.g. JSON/XML)
set foldlevelstart=1    " Start folding at this level
set foldminlines=0      " Fold single line regions
let g:markdown_folding = 1
let g:markdown_fenced_languages = ['bash=sh', 'dot', 'js=javascript', 'kt=kotlin']

" Joining
set nojoinspaces        " Don't add double space after end of sentence when joining
set formatoptions+=j    " Remove comment leader when joining lines

" Show more context
set scrolloff=4         " Try to show some context at top/bottom of screen
set sidescrolloff=4     " Try to show some context at left/right of screen

" Enable mouse
set mouse=a

" Splits in more natural location
set splitbelow
set splitright

" enable 24bit true color
if (has("termguicolors"))
  set termguicolors
endif

" Expect terminal emulator to display things quickly
if (has("termguicolors"))
  set ttyfast
endif

" Correct italics
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

" Make netrw (file explorer) look sane
let g:netrw_liststyle = 3     " Nested view
let g:netrw_banner = 0        " No banner
let g:netrw_winsize = 20      " 20% width
let g:netrw_preview = 1       " Preview in vertsplit
let g:netrw_altv = 0          " Preview to right (if vert)
let g:netrw_alto = 0          " Preview below (if horiz)

" Prefer ripgrep over grep if available
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --hidden
endif

" General file editing enhancements
filetype indent plugin on
syntax enable

" Specific file types
autocmd Filetype gitcommit setlocal textwidth=80
autocmd Filetype ruby setlocal colorcolumn=120
autocmd Filetype kotlin setlocal colorcolumn=131
autocmd Filetype javascript setlocal colorcolumn=91
autocmd Filetype typescript setlocal colorcolumn=91
autocmd Filetype python setlocal colorcolumn=120

" Markdown
autocmd Filetype markdown setlocal wrap
autocmd Filetype markdown noremap j gj
autocmd Filetype markdown noremap k gk
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Key bindings

let mapleader = " "     " Change default leader from '\'

" Mappings:

" - Make copy consistent with other actions
nnoremap Y y$

" - More convenient way to increase/decrease folding
nnoremap zh zm
nnoremap zl zr

" - Retain selection when indenting
vnoremap < <gv
vnoremap > >gv

" - Save some LH typing
inoremap jk <Esc>

" - Save typing dates
inoremap   <F7> <C-R>=strftime("%Y-%m-%d")<CR>
inoremap <S-F7> <C-R>=strftime("%Y-%m-%d %H:%M:%S")<CR>
nmap       <F7> a<F7>
nmap     <S-F7> a<S-F7>
vmap       <F7> c<F7>
vmap     <S-F7> c<S-F7>

" - Visual mode quick duplicate
xnoremap D y'>pgv

" - Highlight word under cursor but don't jump
nnoremap <silent> * :let @/ = '\<' . expand('<cword>') . '\>' <bar> set hls <cr>
" NOTE: Uses x register
xnoremap <silent> * "xy:<C-U>let @/ = '\V'.escape(@x, '\') <bar> set hls <cr>

" - Resize current window with arrow keys
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Left>  :vertical resize -2<CR>
nnoremap <Up>    :resize +2<CR>
nnoremap <Down>  :resize -2<CR>

" Leader mappings:

" - Core
nnoremap <leader>w :write<CR>
nnoremap <leader>x :close<CR>
nnoremap <leader>D :bdelete<CR>
" - Close buffer but keep window
nnoremap <leader>d :bprevious \| bdelete #<CR>
nnoremap <leader>o :let curbuf = bufnr('%') <bar> execute 'bufdo if bufnr("%") != ' . curbuf . ' \| bdelete \| endif'<CR>
nnoremap <leader>j :bnext<CR>
nnoremap <leader>k :bprevious<CR>

" - Quickly execute
nnoremap <leader><CR> :Dispatch!<CR>

" - Append all valid quickfix lines to some register (default is 'a')
nnoremap <leader>yc :cdo execute 'normal "Ayy'<LEFT><LEFT><LEFT>

" - Display mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" - Insert mode completion
" imap <c-x><c-k> <plug>(fzf-complete-word)
" imap <c-x><c-f> <plug>(fzf-complete-path)
" imap <c-x><c-l> <plug>(fzf-complete-line)

" - Interactively prompt for destination after an include-search
nnoremap [I [I:ijump <C-R><C-W><S-LEFT><LEFT> 
nnoremap [D [D:djump <C-R><C-W><S-LEFT><LEFT> 

" - Fuzzy finders
" Normal mappings use "shift" to expand the 
" NOTE: Current selection ones use x register
nnoremap <leader>O <Plug>(FzfSessions)
nnoremap <leader>p <Plug>(FzfFiles)
nnoremap <leader>P <Plug>(FzfBuffers)
nnoremap <leader>H <Plug>(FzfHistory)

" F == shift + f
nnoremap <leader>f <Plug>(FzfText)
xnoremap <leader>f <Plug>(FzfTextSelection)
nnoremap <leader>F <Plug>(FzfTextCurrentWord)

" ? == shift + /
nnoremap <leader>/ <Plug>(FzfBufferLines)
xnoremap <leader>/ <Plug>(FzfBufferLinesSelection)
nnoremap <leader>? <Plug>(FzfBufferLinesCurrentWord)

" } == shift + ]
nnoremap <leader>] <Plug>(FzfBufferTags)
xnoremap <leader>] <Plug>(FzfBufferTagsSelection)
nnoremap <leader>} <Plug>(FzfBufferTagsCurrentWord)

" - Session management
nnoremap <leader>Os :mksession! <C-r>=v:this_session<CR>
nnoremap <leader>Od :! rm <C-r>=v:this_session<CR>

" - Display navigable file outline (in local list or scratch buffer)
nnoremap <leader>so <Plug>(ShowLocalOutline)
nnoremap <leader>sO <Plug>(ShowOutline)
nnoremap <leader>sc :echo system("tags-context" . " " . expand("%") . " " . line("."))<CR>

" - Display file git history
nnoremap <leader>sl :Redir !git log --oneline -n 1000 -- %<CR>

" - Display file git blame
nnoremap <leader>sb :!git blame -- %<CR>

" - Display git tag versions
nnoremap <leader>sv :!clear; git browse-tag-versions<Space>
nnoremap <leader>sV :!clear; git browse-tag-versions <C-R><C-W><CR>

" - Search www
" NOTE: Current selection ones use x register
nnoremap <leader>sd <Plug>(SearchDevDocsCurrentWord)
xnoremap <leader>sd <Plug>(SearchDevDocsSelection)
nnoremap <leader>sg <Plug>(SearchWebCurrentWord)
xnoremap <leader>sg <Plug>(SearchWebSelection)
nnoremap <leader>sw <Plug>(SearchDictionaryCurrentWord)
nnoremap <leader>st <Plug>(SearchThesaurusCurrentWord)

" - Copy things about current buffer to clipboard
nnoremap <leader>cf :let @+ = expand("%") <BAR> redraw <BAR> echo 'Copied path to clipboard'<CR>
nnoremap <leader>cg :GetCurrentBranchLink<CR>

" - Common FS actions on current file (leaves you in command mode)
nnoremap <leader>acp :! cp % %:h/
nnoremap <leader>amv :! mv % %:h/
nnoremap <leader>arm :! rm %
nnoremap <leader>ach :! chmod +x %<Left><Left>
nnoremap <leader>apa :! paginate %
nnoremap <leader>ax  :!  % %:h/<S-Left><S-Left><Left>

" - Manually manage location list
nmap <leader>la <Plug>(LociAdd)
nmap <leader>lc <Plug>(LociClear)
nmap <leader>lr <Plug>(LociRead)
nmap <leader>lw <Plug>(LociWrite)

" - Writing presentations
nnoremap <leader>th <Plug>(ToiletBig)
nnoremap <leader>tH <Plug>(ToiletStandard)
nnoremap <leader>tf <Plug>(ToiletFuture)
nnoremap <leader>tF <Plug>(ToiletPagga)
nnoremap <leader>tb <Plug>(ToiletBorder)

" - Managing todo lists
nnoremap <leader>ti :put ='- [ ] <+ TODO +>'<CR>
nnoremap <leader>tt :keeppatterns s/\v\[([^\]]*)\]/\="[".(submatch(1)==" "?"x":" ")."]"/<CR>
nnoremap <leader>tc :keeppatterns s/\v\[([^\]]*)\]/\="[".(submatch(1)==" "?"-":" ")."]"/<CR>

" - .vimrc shortcuts
nnoremap <leader>ve :edit $MYVIMRC<CR>
nnoremap <leader>vr :source $MYVIMRC <BAR> redraw <BAR> echo 'Reloaded .vimrc'<CR>

" - Git shortcuts
nnoremap <leader>gg :G<CR>

" - Github cli shortcuts
nnoremap <leader>gp :! gh pr create<CR>
nnoremap <leader>gs :! gh pr status<CR>
nnoremap <leader>gc :! gh pr checks<CR>
nnoremap <leader>gC :! gh pr checks --watch<CR>
nnoremap <leader>gm :! gh pr merge<CR>

" - tmux
nnoremap <leader>ts <Plug>(TmuxSendRight)
xnoremap <leader>ts <Plug>(TmuxSendRightSelect)
nnoremap <leader>ty <Plug>(TmuxCopy)
xnoremap <leader>ty <Plug>(TmuxCopySelect)
nnoremap <leader>tp <Plug>(TmuxPasteBelow)
nnoremap <leader>tP <Plug>(TmuxPasteAbove)
nnoremap <leader>te :! tmux display-popup -T "%" -S "fg=blue" -w "80\%" -h "95\%" "%:p" &<CR><CR>
nnoremap <leader>tE :! tmux display-popup -T "%" -S "fg=blue" -w "80\%" -h "95\%" "%:p" &<Left><Left><Left>
cnoremap <C-\><CR> <C-B>execute '<Right> tmux display-popup -S "fg=magenta" -w "80\%" <C-E> &' \| redraw!<CR><CR>

" - Execute lines and append output
" Uses x register.
nnoremap <leader>eeb "xyy:put x<CR>:'[,']!bash<CR>k
xnoremap <leader>eeb "xy:'>put x<CR>:'[,']!bash<CR>gv
nnoremap <leader>eer "xyy:put x<CR>:'[,']!ruby<CR>k
xnoremap <leader>eer "xy:'>put x<CR>:'[,']!ruby<CR>gv
nnoremap <leader>eep "xyy:put x<CR>:'[,']!python3<CR>k
xnoremap <leader>eep "xy:'>put x<CR>:'[,']!python3<CR>gv

" - Execute current line (in shell)
" Uses x register.
nnoremap <leader>es :!<C-R>=escape(getline('.'), '%')<CR><CR>
nnoremap <leader>eS :!clear;<C-R>=escape(getline('.'), '%')<CR><CR>
xnoremap <leader>es "xy:echo system('sh', getreg('x'))<CR>
xmap <leader>eS <leader>es

" - Execute current file (in shell)
nnoremap <leader>ef :! ./%<CR>
nnoremap <leader>eF :!clear; ./%<CR>

" Snippets
nnoremap <leader>is <Plug>(SnippetsInsert)

" Insert person from git
vnoremap <leader>ip <Plug>(GitReplaceWithPerson)

" - Insert link from nb
nnoremap <leader>in <Plug>(NbInsertLink)

" - Refactor: Inline
" NOTE: Uses i and j registers, and i and j marks.
nnoremap <leader>ri <Plug>(RefactoringInline)
xnoremap <leader>ri <Plug>(RefactoringInline)
" NOTE: Assumes search register is target and selection value. Uses default
" register, and j mark.
xnoremap <leader>rI y:'> mark j<Cr>N"_cgn<C-r>0<Esc>:'[,'j d<Cr>

" - LSP
nnoremap <leader>re :call lsp#enable()<CR>
nnoremap <leader>rd :call lsp#disable()<CR>

" Special non-leader mappings:

" - Insert placeholder
nnoremap <leader><C-j> a<++><Esc>

" - Find and <++>select next placeholder
nnoremap <C-j> :keeppattern normal! /\v\<\+[^>]*\+\><C-v><CR><CR>vf><C-g>
smap <C-j> <Esc><C-j>
imap <C-j> <Esc><C-j>

" - Show presentation
noremap <silent> <F5> <Plug>(PresenterPresent)

" - Syntax explorer
noremap   <F10> <Plug>(SyntaxexplorerAtCursor)
noremap <S-F10> <Plug>(SyntaxexplorerStackAtCursor)
nnoremap  <F12> <Plug>(SyntaxexplorerResync)
inoremap  <F12> <C-o><Plug>(SyntaxexplorerResync)

" - Quickfix list
" Toggle quickfix list (unimpaired-like keybindings)
noremap [oq :copen<CR>
noremap ]oq :cclose<CR>
function! <SID>ToggleQuickfixWindow()
  if <SID>QuickfixWindowNumber() > 0
    cclose
  else
    copen
  endif
endfunction
function! <SID>QuickfixWindowNumber()
  let wins = filter(getwininfo(), 'v:val.quickfix && !v:val.loclist')
  return empty(wins) ? 0 : wins[0].winnr
endfunction

" - Git gutter
" Disable by default and toggle via mapping
let g:gitgutter_enabled = 0
noremap <leader>gt :GitGutterBufferToggle<CR>

" - Copilot
" Disable by default and toggle via mapping
let g:copilot_filetypes = { '*': v:false }
function! <SID>CopilotToggle()
  let b:copilot_enabled = getbufvar(bufnr('%'), 'copilot_enabled', 0) ? v:false : v:true
  echo b:copilot_enabled ? 'Copilot enabled' : 'Copilot disabled'
endfunction
noremap <Space>zt <Cmd>call <SID>CopilotToggle()<CR>

" Quality of life copilot keymaps
inoremap <C-l> <Cmd>call copilot#Next()<CR>
inoremap <C-b> <Plug>(copilot-accept-word)

" Copilot airline indicator (beware cloud!)
function! <SID>AirlineInit()
  function! GetCopilotStatus()
    return getbufvar(bufnr('%'), 'copilot_enabled', 0) != 0 ? 'COPILOT' : ''
  endfunction
  call airline#parts#define_function('copilot', 'GetCopilotStatus')
  call airline#parts#define_accent('copilot', 'red')
  let g:airline_section_a = airline#section#create(['mode', 'crypt', 'paste', 'spell', 'iminsert', 'copilot'])
endfunction
autocmd User AirlineAfterInit call <SID>AirlineInit()

" Plugins (managed by `vim-plugin`)
" - Bootstrap if not installed
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" - Plugins to install
call plug#begin('~/.vim/plugged')
Plug 'https://github.com/tpope/vim-sensible'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/tpope/vim-surround'
" Plug 'https://github.com/tpope/vim-rails'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/tpope/vim-projectionist'
Plug 'https://github.com/tpope/vim-dispatch'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
Plug 'https://github.com/airblade/vim-gitgutter'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/haishanh/night-owl.vim'
Plug 'https://github.com/junegunn/fzf'
Plug 'https://github.com/junegunn/fzf.vim'
Plug 'https://github.com/junegunn/goyo.vim'
Plug 'https://github.com/junegunn/limelight.vim'
Plug 'https://github.com/knsh14/vim-github-link'
Plug 'https://github.com/wincent/terminus'
Plug 'https://github.com/editorconfig/editorconfig-vim'
Plug 'https://github.com/mbbill/undotree.git'
Plug 'https://github.com/edwardsnjd/vim-lsp', { 'branch': 'before-init' }
Plug 'https://github.com/elkasztano/nushell-syntax-vim'
Plug 'https://github.com/justin2004/vim-apl'
Plug 'https://github.com/github/copilot.vim'
Plug 'https://github.com/Apeiros-46B/uiua.vim'
call plug#end()

" enable the theme
colorscheme night-owl
let g:airline_theme='night_owl'

" LSP

function! <SID>ConfigureLsp() abort
  " Misc
  let g:lsp_format_sync_timeout = 1000

  " Show errors details as popup on cursor
  let g:lsp_diagnostics_virtual_text_enabled = 1
  let g:lsp_diagnostics_virtual_text_align = "after"
  let g:lsp_diagnostics_float_cursor = 1
  let g:lsp_diagnostics_float_delay = 200
  let g:lsp_inlay_hints_enabled = 1
  let g:lsp_inlay_hints_mode = { 'normal': ['!curline'] }

  " Allow full width popups
  let ninety5pct = &columns * 95 / 100
  let maxWidth = 100
  let g:lsp_float_max_width = ninety5pct < maxWidth ? ninety5pct: maxWidth

  " Tweak preview
  let g:lsp_peek_alignment = "top"
endfunction

function! <SID>ConfigureLspBuffer() abort
  " Make space for LSP status in sign column
  setlocal signcolumn=yes

  " C-X C-O for LSP autocomplete
  setlocal omnifunc=lsp#complete

  " Use LSP not ctags
  if exists('+tagfunc')
    setlocal tagfunc=lsp#tagfunc
  endif

  " Informational mappings
  nmap <buffer> K <plug>(lsp-hover)
  nmap <buffer> ge <plug>(lsp-document-diagnostics)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gp <plug>(lsp-peek-definition)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  " Scroll hover popups
  nnoremap <buffer> <expr> <c-h> lsp#scroll(+1)
  nnoremap <buffer> <expr> <c-l> lsp#scroll(-1)"
  " Mutating mappings
  nmap <buffer> <leader>rf <plug>(lsp-document-format)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> <leader>rr <plug>(lsp-code-action)
  vmap <buffer> <leader>rr :LspCodeAction<CR>
  " Toggle info
  nnoremap <buffer> <leader>Gi :let g:lsp_inlay_hints_enabled = 1<CR>
  nnoremap <buffer> <leader>GI :let g:lsp_inlay_hints_enabled = 0<CR>
endfunction

augroup lsp_install
  autocmd!
  autocmd User lsp_setup call <SID>ConfigureLsp()
  autocmd User lsp_buffer_enabled call <SID>ConfigureLspBuffer()
augroup END
