#!/usr/bin/env bash

# Handy command aliases to make terminal more pleasant

# some more ls aliases
alias  l='ls --color=auto -AFl --group-directories-first'
alias ll='ls --color=auto -AFl --group-directories-first'
alias la='ls --color=auto -AF  --group-directories-first'
# Simpler navigation up
alias   ..='cd ..'          # Go up one directory
alias  ...='cd ../..'       # Go up two directories
alias ....='cd ../../..'    # And for good measure
# Simple tree view
alias    t='tree -aF -I .git --dirsfirst -L 1'
alias   tt='tree -aF -I .git --dirsfirst -L 2'
alias  ttt='tree -aF -I .git --dirsfirst -L 3'
alias tree='tree -aF -I .git --dirsfirst'
# List shell completions
alias list_aliases='compgen -A alias | sort -u'
alias list_commands='compgen -A command | sort -u'
alias list_functions='compgen -A function | sort -u'
alias list_users='compgen -A user | sort -u'
alias list_variables='compgen -A variable | sort -u'

# Text format conversions

function hex2dec() { printf "%d\n" "0x$1"; }
function dec2hex() { printf "%x\n" "$1"; }
function dec2oct() { printf "%03o\n" "$1"; }
function bin2oct() { echo "ibase=2; obase=8; $1" | bc; }

function ascii2base64 { exec base64; }
function base642ascii { exec base64 -d; }

function ascii2hex { exec xxd -c8 -p; }
function hex2ascii { exec xxd -p -r; }

function ascii2dec {
  # Convert every input character (including newlines)
  xxd -c1 -p | while read hex; do hex2dec "$hex"; done
}
function dec2ascii() {
  # Process each word as decimal, ignore all whitespace
  while read line; do
    for dec in $line; do
      printf \\$(dec2oct "$dec")
    done
  done
}

function ascii2bin() {
  # Convert every input character (including newlines)
  xxd -c1 -b | cut -d " " -f2
}
function bin2ascii() {
  # Process each word as binary, ignore all whitespace
  while read line; do
    for bin in $line; do
      printf \\$(bin2oct "$bin");
    done
  done
}

# Keys

# fzf browse of all configured key bindings in your shell (assumes
# bash and tmux)
function keys() {
  # Performance: Capture data once to temp file (for multiple use)
  local temp="$(mktemp)"

  # HACK: Columnize header with data to match expected columns
  {
    echo "app	mode	key(s)	command(s)"
    keys_tmux
    keys_readline
    keys_fzf
  } | column -s $'\t' -t > "$temp"

  # fzf to browse the bindings
  local header=$(head -1 "$temp")
  tail +2 "$temp" \
    | sort \
    | fzf \
      --reverse \
      --no-sort \
      --ellipsis "â‹¯" \
      --header "$header"

  # Tidy up
  rm $temp
}

# List all key bindings for Tmux
# Rows: app	mode	key(s)	command(s)
function keys_tmux() {
  local prefix=$(tmux show-options -g prefix | cut -d " " -f2)
  tmux list-keys \
    | sed -E 's/bind-key .. -T //' \
    | sed -E 's/^([^ ]+) +([^ ]+) +(.*)$/tmux\t\1\t\2\t\3/' \
    | awk -F "\t" -v OFS="\t" '
        # Strip backslash escape chars
        $3 ~ /^\\.$/  { $3 = substr($3, 2) }
        # Strip quoted keys
        $3 ~ /^".+"$/ { $3 = substr($3, 2, length($3)-2) }
        # Print all
        { print }
      '
  printf "tmux\troot\t${prefix}\t# Main tmux prefix mode\n"
}

# List default key bindings for fzf
# Rows: app	mode	key(s)	command(s)
function keys_fzf() {
  echo "/AVAILABLE ACTION/+4,/ACTION COMPOSITION/-3 p" \
    | ex <( MANWIDTH=200 man -P cat fzf | col -b ) \
    | sed -E '
      # Strip leading spaces
      s/^ +//
      # Separate first field
      s/^([^ ]+) +/\1	/
      # Handle second field notes
      s/^([^	]+)	\((.+)\)$/\1	?	\2/
      # Handle second field keys
      s/^([^	]+)	([^	]+)$/\1	\2	/
      # Handle single fields
      s/^([^	]+)$/\1	?	/
      # Handle 3 fields
      s/^([^	]+)	([^	]+) +\((.+)\)\t$/\1	\2	\3/
    ' \
    | awk -F $'\t' '{
      split($2, keys, " +")
      for (i in keys) {
        printf("fzf	root	%s	%s\n", keys[i], $1)
      }
    }' \
    | sed -E 's/ \(\)$//' \
    | sed -E 's/ctrl-/C-/g; s/alt-/M-/g'
}

# List all key bindings for bash readline
# NOTE: This will only return your keybindings if run in an interactive
# shell session.  Running `bind` from a non-interactive script will not have
# loaded your interactive bash configuration, which might include `readline`
# keybindings.
# Rows: app	mode	key(s)	command(s)
function keys_readline() {
  local selfInsertHex=$(printf ": self-insert" | xxd -c0 -p)
  local quoteHex=$(printf '"' | xxd -c0 -p)
  local newlineHex=$(printf "\n" | xxd -c0 -p)

  # HACK: Detour via hex representation so we can remove mappings for
  # non-textual lines, since they break all the normal line based tools.
  {
    bind -X \
      | sed -E 's/^"(.*)": (.*)$/readline\troot\t\1\t\2/'
    bind -p \
      | tail +2 \
      | xxd -c0 -p | sed -E "s/${quoteHex}.{2,8}${quoteHex}${selfInsertHex}${newlineHex}//g" | xxd -r -p \
      | grep -v "^#" \
      | sed -E 's/^"(.*)": (.*)$/readline\troot\t\1\t(readline)\2/'
  } | awk -F $'\t' -v OFS=$'\t' '{
      gsub(/ /, "Space", $3)
      gsub(/\\C/, "C", $3)
      gsub(/\\e/, "M-", $3)
      print
    }'
}

# Dockerised tools
function elm {
  docker run \
    -it --rm \
    -v "$(pwd):/code" \
    -w "/code" \
    -e "HOME=/tmp" \
    -u $UID:$GID \
    -p 8000:8000 \
    codesimple/elm:0.19 \
    "$@"
}

# Convert asciinema casts
function asciicast2gif {
  docker run --rm -v $PWD:/data asciinema/asciicast2gif "$@"
}

# Date
alias localdate='date +"%Y-%m-%d"'
alias isodate='date -u +"%Y-%m-%d"'
alias isotime='date -u +"%Y-%m-%dT%H:%MZ"'
alias isostamp='date -u +"%Y-%m-%dT%H:%M:%SZ"'

# Helper to join args by a separator
function join_by() {
  local IFS="$1"
  shift
  echo "$*"
}

# iTerm2 tmux (control mode and reuse session)
alias tm='tmux -CC new-session -As'
# Alias for convenient tmux session picker
alias ta='tmux-attach'

# Web search for given term
function ws {
  local -r search_terms="$@"
  local -r url="https://duckduckgo.com/?q=${search_terms}"
  /Users/nick/bin/brave-cli "${url}"
}

# Watch in colour with configurable interval
function wtch {
  local -r interval="$1"
  local -r args="${@:2}"

  \watch --interval "$interval" --color faketty "$args"
}

# Default is 5 seconds (in colour)
alias watch='wtch 5'

# Github CLI aliases
alias ghw='watch gh'

# FZF file system browsers
alias f="file-browser"
alias d="directory-browser"

# Clear and print ruler
alias cl="clear && ruler"

# FZF timezone picker
alias tz="timezones"

# Find current weather forecast
alias wttr="weather-forecast"

# FZF browse of files for git diff
function gd {
  details="bat {} --pager='less -c -+F -+X'"
  preview="git diff --color=always $@ -- {}"
  git diff --name-only "$@" \
    | fzf -m --preview "$preview" --bind="enter:execute($details)"
}

# FZF browse of branches for git checkout
function gc {
  format="%(color:yellow)%(refname:short)%(color:reset) %(color:red)%(HEAD)%(color:reset) %(upstream:trackshort) %(upstream:short) %(upstream:track)"
  preview="git lg -100 {1}"
  git branch --list --color --format="$format" \
    | fzf --no-sort --layout=reverse-list --ansi --cycle --preview="$preview" --query="$1" \
    | cut -d" " -f1 \
    | xargs git checkout
}

# FZF browse of git log
function glg {
  pretty="format:%C(yellow)%h%C(reset) %s %C(cyan)<%an>%C(red)%d%C(reset)"
  preview="echo {} | grep -Eo '[a-f0-9]{7,}' | head -1 | xargs git show --color | less -c -+F -+X"
  git log --graph --color --pretty="$pretty" --date=short --decorate "$@" \
    | fzf --ansi --layout=reverse-list --no-sort --preview="$preview" --bind "ctrl-/:change-preview-window(bottom|hidden|default)" \
    | grep -Eo '[a-f0-9]{7,}' | head -1
}

# Interactive FZF browse of git log
function gl {
  preview="echo {} | grep -Eo '[a-f0-9]{7,}' | head -1 | xargs git show --color | less -c -+F -+X"
  git lg -n5000 "$@" \
    | fzf --ansi --layout=reverse-list --no-sort --bind="enter:execute($preview)"
}

# Interactive git history of a file (versions)
function gtt {
  pretty="format:%C(yellow)%h%C(reset) %s %C(cyan)<%an>%C(red)%d%C(reset)"
  preview="echo {} | grep -Eo '[a-f0-9]{7,}' | head -1 | xargs -I%% git show %%:$1 | bat --style=plain --color=always --file-name=$1"

  sha=$(
    git log --pretty="$pretty" --color -- $1 \
      | fzf --ansi --layout=reverse-list --no-sort --preview="$preview" --bind "ctrl-/:change-preview-window(bottom|hidden|default)" \
      | grep -Eo '[a-f0-9]{7,}' | head -1
  )
  git show "$sha:$1" \
    | bat --file-name="$1"
}

# Interactive git history of a file (diffs)
function gtd {
  pretty="format:%C(yellow)%h%C(reset) %s %C(cyan)<%an>%C(red)%d%C(reset)"
  preview="echo {} | grep -Eo '[a-f0-9]{7,}' | head -1 | xargs -I%% git show --color %% -- $1 | less -c -+F -+X"

  sha=$(
    git log --pretty="$pretty" --color -- $1 \
      | fzf --ansi --layout=reverse-list --no-sort --preview="$preview" --bind "ctrl-/:change-preview-window(bottom|hidden|default)" \
      | grep -Eo '[a-f0-9]{7,}' | head -1
  )
  git show "$sha:$1" \
    | bat --file-name="$1"
}

# nb shorcuts

# Edit journal entry for today
function nbj {
  local command="edit"
  if [[ $# -gt 0 ]]; then
    command="$1"
  fi

  case "$command" in
    initcontent)
      cat <<-EOF
			\`\`\`
			$(emojify-cal cal)
			\`\`\`
			
			## Tasks
			
			- [ ] <+ TODO +>
			
			## Notes
			
			- <+ TODO +>
			EOF
      return
      ;;
    edit)
      # Default, fall through to main task
      ;;
    *)
      echo "Unknown command: $1" >&2
      return
      ;;
  esac

  local notebook=journal
  local today=$(date +"%Y-%m-%d")
  local path=${today}.md

  # Ensure the notebook exists
  nb notebooks "${notebook}" \
    || nb notebooks add "${notebook}"

  # Ensure the note exists
  nb ls "${notebook}:${path}" \
    || nb add "${notebook}:${path}" \
      --title "${today}" \
      --tags "journal" \
      --content "$(nbj initcontent)"

  # Edit the note
  nb edit "${notebook}:${path}"
}

# Add note on topic
function nbt {

  topic="$1"

  nb add --folder "${topic}"
}

# Slow down `cat` with a pause between each line
function slowcat {
  pause=${1:-2}
  while read
  do
    sleep $pause
    echo "$REPLY"
  done
}

# Output a line of some file pausing for some user input before each line
# Pass file to read on fd 3:  demandcat 3<input.txt
function demandcat {
  while read <&3
  do
    echo "$REPLY"
    read
  done
}


