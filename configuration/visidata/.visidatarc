#! /usr/bin/env python

@Sheet.api
def toggle_heatmap(sheet):
    existing = getattr(sheet, "heatmap", None)
    if existing:
        sheet.heatmap = None
        sheet.removeColorizer(existing)
    else:
        sheet.heatmap = build_heatmap(sheet)
        sheet.addColorizer(sheet.heatmap)

def build_heatmap(sheet):
    colours = ['235','240','245','250','254']

    # NOTE: This naively finds ALL numeric values in the sheet
    values = []
    numeric_cols = [c for c in sheet.nonKeyVisibleCols if vd.isNumeric(c)]
    for r in sheet.iterrows():
        values += [c.getTypedValue(r) for c in numeric_cols]

    numeric_values = [v for v in values if isinstance(v, (int, float))]

    max_value = max(numeric_values)
    min_value = min(numeric_values)

    bucket_width = (max_value - min_value) / (len(colours) - 1)
    bucket_bounds = [(min_value + bucket_width * i) for i in range(len(colours))]

    def pick_color(s,c,r,v):
        if v is None or not c in numeric_cols:
            return None

        value = c.getTypedValue(r)

        for index, bound in enumerate(bucket_bounds):
            if value <= bound:
                return colours[index]

    return CellColorizer(3, None, pick_color)

TableSheet.addCommand(None, 'toggle-heatmap', 'toggle_heatmap()', 'colour numeric columns as a heatmap')

options.disp_date_fmt = "%Y-%m-%d %H:%M:%S"
options.numeric_binning = True

# See: https://github.com/saulpw/visidata/discussions/2691#discussioncomment-11978695

## Utility class to emulate a curses screen and allow readout of drawn text via screenshot().
class ScreenLike:
    def __init__(self, w, h):
        self.w = w
        self.h = h
        self.pixels = [[' ' for _ in range(self.w)] for _ in range(self.h)]
    def getmaxyx(self):
        return self.h, self.w
    def addstr(self, y, x, ch_str, attr):
        if not (0 <= y < self.h): vd.warning(f'bad y coord in ScreenLike: y={y}')
        if not (0 <= x < self.w): vd.warning(f'bad x coord in ScreenLike: x={x}')
        self.pixels[y][x] = ch_str
        for ch in ch_str:
            self.pixels[y][x] = ch
            for i in range(1, dispwidth(ch)):
                if x+i < len(self.pixels[y]):
                    self.pixels[y][x+i] = ''
                else:
                    vd.warning(f'screen overflow in ScreenLike: x={x+i}')
            x += dispwidth(ch)
    def screenshot(self):
        return [ ''.join(self.pixels[y]) for y in range(len(self.pixels)) ]

@BaseSheet.api
def screenshot(self):
    '''Return a list of strings, one per screen row.
    Each string has as many characters as the display has columns.'''
    if not self._scr: vd.fail('cannot take text screenshot without a screen')
    h, w = self._scr.getmaxyx()
    scr_like = ScreenLike(w, h)
    self.draw(scr_like)
    #refresh manually, in case draw(scr_like) unsets self.needsRefresh
    self.refresh()
    return scr_like.screenshot()

BaseSheet.addCommand('', 'open-screenshot', 'vd.push(TextSheet(source=screenshot()))', 'custom: open a sheet with text of drawn graph')
BaseSheet.addCommand('', 'syscopy-screenshot', 't = TextSheet(source=screenshot()); t.ensureLoaded(); t.syscopyCells(t.columns, t.rows, filetype="txt")', 'custom: copy graph text to the system clipboard')
BaseSheet.addCommand('', 'sysedit-screenshot', 't = TextSheet(source=screenshot()); t.ensureLoaded(); t.syseditCells(t.columns, t.rows, filetype="txt")', 'custom: open copy of graph text in $EDITOR')
GraphSheet.bindkey('gz"', 'open-screenshot')
GraphSheet.bindkey('gzY', 'syscopy-screenshot')
GraphSheet.bindkey('g^O', 'sysedit-screenshot')

# See https://github.com/saulpw/visidata/discussions/1844
@Canvas.api
def toggle_plot_asterisk(canvas: Canvas) -> None:
    if canvas.options.disp_canvas_charset == ' \u25cf':
        canvas.options.disp_canvas_charset = None
    else:
        canvas.options.disp_canvas_charset = ' \u25cf'

Canvas.addCommand('*', 'toggle-plot-asterisk', 'toggle_plot_asterisk()') 
